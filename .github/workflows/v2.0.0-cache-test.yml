name: Docker Build with Cache Testing (Fixed)

on: 
  push: 
    paths:
      - '.github/workflows/v2.0.0-cache-test.yml'

jobs:
  # Simple build without advanced cache (uses docker driver)
  simple-build:
    runs-on: ubuntu-latest
    name: Simple Build (No Cache)
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Simple Build
        uses: dinushchathurya/build-tag-push-action@v2.0.0-rc.1
        with:
          username: ${{ secrets.DOCKER_NEW_USERNAME }}
          password: ${{ secrets.DOCKER_NEW_PASSWORD }}
          context: .
          file: Dockerfile
          repoOwner: ${{ secrets.DOCKER_NEW_USERNAME }}
          repository: build-push-tag-action
          tag: simple-${{ github.sha }}
          platforms: linux/amd64
          labels: |
            cache.test.type=simple-no-cache
            org.opencontainers.image.title=Simple Build Test

  # GitHub Actions Cache (requires docker-container driver)
  gha-cache-build:
    runs-on: ubuntu-latest
    name: GitHub Actions Cache Test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Build with GHA Cache
        uses: dinushchathurya/build-tag-push-action@v2.0.0-rc.1
        with:
          username: ${{ secrets.DOCKER_NEW_USERNAME }}
          password: ${{ secrets.DOCKER_NEW_PASSWORD }}
          context: .
          file: Dockerfile
          repoOwner: ${{ secrets.DOCKER_NEW_USERNAME }}
          repository: build-push-tag-action
          tag: gha-cache-${{ github.sha }}
          platforms: linux/amd64
          cache_from: type=gha
          cache_to: type=gha,mode=max
          labels: |
            cache.test.type=gha-cache
            org.opencontainers.image.title=GHA Cache Test

  # Registry Cache (requires docker-container driver)
  registry-cache-build:
    runs-on: ubuntu-latest
    name: Registry Cache Test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Build with Registry Cache
        uses: dinushchathurya/build-tag-push-action@v2.0.0-rc.1
        with:
          username: ${{ secrets.DOCKER_NEW_USERNAME }}
          password: ${{ secrets.DOCKER_NEW_PASSWORD }}
          context: .
          file: Dockerfile
          repoOwner: ${{ secrets.DOCKER_NEW_USERNAME }}
          repository: build-push-tag-action
          tag: registry-cache-${{ github.sha }}
          platforms: linux/amd64
          cache_from: type=registry,ref=${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:cache
          cache_to: type=registry,ref=${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:cache,mode=max
          labels: |
            cache.test.type=registry-cache
            org.opencontainers.image.title=Registry Cache Test

  # Multi-platform build (requires docker-container driver)
  multiplatform-build:
    runs-on: ubuntu-latest
    name: Multi-platform Build Test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Multi-platform Build
        uses: dinushchathurya/build-tag-push-action@v2.0.0-rc.1
        with:
          username: ${{ secrets.DOCKER_NEW_USERNAME }}
          password: ${{ secrets.DOCKER_NEW_PASSWORD }}
          context: .
          file: Dockerfile
          repoOwner: ${{ secrets.DOCKER_NEW_USERNAME }}
          repository: build-push-tag-action
          tag: multiplatform-${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache_from: type=gha
          cache_to: type=gha,mode=max
          labels: |
            cache.test.type=multiplatform-gha-cache
            org.opencontainers.image.title=Multi-platform with GHA Cache

  # Combined test - Multi-cache sources
  combined-cache-build:
    runs-on: ubuntu-latest
    name: Combined Cache Test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Build with Multiple Cache Sources
        uses: dinushchathurya/build-tag-push-action@v2.0.0-rc.1
        with:
          username: ${{ secrets.DOCKER_NEW_USERNAME }}
          password: ${{ secrets.DOCKER_NEW_PASSWORD }}
          context: .
          file: Dockerfile
          repoOwner: ${{ secrets.DOCKER_NEW_USERNAME }}
          repository: build-push-tag-action
          tag: combined-cache-${{ github.sha }}
          platforms: linux/amd64
          cache_from: |
            type=gha
            type=registry,ref=${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:cache
          cache_to: |
            type=gha,mode=max
            type=registry,ref=${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:cache,mode=max
          labels: |
            cache.test.type=combined-cache
            org.opencontainers.image.title=Combined Cache Test

  # Verification job
  verify-builds:
    runs-on: ubuntu-latest
    name: Verify All Builds
    needs: [simple-build, gha-cache-build, registry-cache-build, multiplatform-build, combined-cache-build]
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_NEW_USERNAME }}
          password: ${{ secrets.DOCKER_NEW_PASSWORD }}

      - name: Verify All Built Images
        run: |
          echo "üîç Verifying all built images..."
          
          # List of tags to verify
          TAGS=(
            "simple-${{ github.sha }}"
            "gha-cache-${{ github.sha }}"
            "registry-cache-${{ github.sha }}"
            "multiplatform-${{ github.sha }}"
            "combined-cache-${{ github.sha }}"
          )
          
          echo "üìä Build Verification Report"
          echo "============================"
          echo ""
          
          for tag in "${TAGS[@]}"; do
            IMAGE_NAME="${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:$tag"
            echo "üì¶ Verifying: $tag"
            
            # Pull image
            if docker pull "$IMAGE_NAME" >/dev/null 2>&1; then
              # Get image details
              SIZE=$(docker inspect "$IMAGE_NAME" --format='{{.Size}}' | numfmt --to=iec)
              CREATED=$(docker inspect "$IMAGE_NAME" --format='{{.Created}}')
              CACHE_TYPE=$(docker inspect "$IMAGE_NAME" --format='{{index .Config.Labels "cache.test.type"}}' 2>/dev/null || echo "unknown")
              PLATFORMS=$(docker inspect "$IMAGE_NAME" --format='{{.Architecture}}')
              
              echo "  ‚úÖ Status: Success"
              echo "  üìè Size: $SIZE"
              echo "  üèóÔ∏è  Platform: $PLATFORMS"
              echo "  üè∑Ô∏è  Cache Type: $CACHE_TYPE"
              echo "  üìÖ Created: $CREATED"
            else
              echo "  ‚ùå Status: Failed to pull"
            fi
            echo ""
          done
          
          echo "üéâ Verification completed!"
          
          # Test multi-platform image specifically
          echo ""
          echo "üîç Multi-platform verification:"
          MULTI_IMAGE="${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:multiplatform-${{ github.sha }}"
          
          # Check manifest for multiple architectures
          if docker manifest inspect "$MULTI_IMAGE" >/dev/null 2>&1; then
            echo "‚úÖ Multi-platform manifest exists"
            docker manifest inspect "$MULTI_IMAGE" | jq -r '.manifests[] | "  - \(.platform.architecture)/\(.platform.os)"' 2>/dev/null || echo "  - Manifest details not available"
          else
            echo "‚ö†Ô∏è Multi-platform manifest check failed (may be single platform)"
          fi