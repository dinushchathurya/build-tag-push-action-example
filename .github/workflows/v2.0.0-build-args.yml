name: Docker Build and Push with Verification

on: 
  push: 
    paths:
      - '.github/workflows/v2.0.0-build-args.yml'

jobs:
  docker-login-build-tag-push:
    runs-on: ubuntu-latest
    
    name: Docker Login, Build, Tag & Push to DockerHub
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Build, Tag & Publish Image to DockerHub with Build Args and Labels
        id: build
        uses: dinushchathurya/build-tag-push-action@v2.0.0-rc.1
        with:
            username: ${{ secrets.DOCKER_NEW_USERNAME }}
            password: ${{ secrets.DOCKER_NEW_PASSWORD }}
            context: .
            file: Dockerfile
            repoOwner: ${{ secrets.DOCKER_NEW_USERNAME }}
            repository: build-push-tag-action
            tag: ${{ github.sha }}
            build_args: | 
                NODE_ENV=test
                VERSION=1.0.0
                BUILD_DATE=${{ github.event.head_commit.timestamp }}
                GITHUB_SHA=${{ github.sha }}
                GITHUB_REF=${{ github.ref }}
                CUSTOM_ARG=test-value
                MULTI_LINE_ARG=line1\nline2\nline3
            labels: |
                org.opencontainers.image.title=Test Application
                org.opencontainers.image.description=Testing build args and labels
                org.opencontainers.image.url=https://github.com/${{ github.repository }}
                org.opencontainers.image.source=https://github.com/${{ github.repository }}
                org.opencontainers.image.version=1.0.0
                org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
                org.opencontainers.image.revision=${{ github.sha }}
                org.opencontainers.image.licenses=MIT
                org.opencontainers.image.vendor=Test Company
                maintainer=test@company.com
                environment=test
                test.type=build-args-labels
                test.timestamp=${{ github.event.head_commit.timestamp }}

      # ==========================================
      # VERIFICATION STEPS
      # ==========================================
      
      - name: Verify Image Labels
        run: |
          echo "🔍 Verifying Docker image labels..."
          IMAGE_NAME="${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:${{ github.sha }}"
          
          # Pull the image to inspect it
          docker pull "$IMAGE_NAME"
          
          echo "📋 All Labels:"
          docker inspect "$IMAGE_NAME" --format='{{json .Config.Labels}}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' | sort
          
          echo ""
          echo "✅ Checking specific labels:"
          
          # Check specific labels
          TITLE=$(docker inspect "$IMAGE_NAME" --format='{{index .Config.Labels "org.opencontainers.image.title"}}')
          VERSION=$(docker inspect "$IMAGE_NAME" --format='{{index .Config.Labels "org.opencontainers.image.version"}}')
          MAINTAINER=$(docker inspect "$IMAGE_NAME" --format='{{index .Config.Labels "maintainer"}}')
          
          echo "Title: $TITLE"
          echo "Version: $VERSION"
          echo "Maintainer: $MAINTAINER"
          
          # Verify labels exist
          if [[ "$TITLE" == "Test Application" ]]; then
            echo "✅ Title label verified"
          else
            echo "❌ Title label missing or incorrect"
            exit 1
          fi
          
          if [[ "$VERSION" == "1.0.0" ]]; then
            echo "✅ Version label verified"
          else
            echo "❌ Version label missing or incorrect"
            exit 1
          fi

      - name: Verify Build Args (via Environment Variables)
        run: |
          echo "🔍 Verifying build arguments..."
          IMAGE_NAME="${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:${{ github.sha }}"
          
          # Run container and check environment variables
          echo "📋 Checking build args that were set as ENV in Dockerfile:"
          
          # Check if NODE_ENV was set
          NODE_ENV=$(docker run --rm "$IMAGE_NAME" printenv NODE_ENV || echo "not_set")
          echo "NODE_ENV: $NODE_ENV"
          
          # Check if VERSION was set
          VERSION=$(docker run --rm "$IMAGE_NAME" printenv VERSION || echo "not_set")
          echo "VERSION: $VERSION"
          
          # Check custom arg
          CUSTOM_ARG=$(docker run --rm "$IMAGE_NAME" printenv CUSTOM_ARG || echo "not_set")
          echo "CUSTOM_ARG: $CUSTOM_ARG"

      - name: Verify Build Args via File Check
        run: |
          echo "🔍 Verifying build arguments via build-time files..."
          IMAGE_NAME="${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:${{ github.sha }}"
          
          # If your Dockerfile creates files with build arg values, check them
          # Example: RUN echo "$VERSION" > /app/version.txt
          
          echo "📋 Checking build-time generated files:"
          
          # Check if build created any verification files
          docker run --rm "$IMAGE_NAME" find /app -name "*.txt" -exec cat {} \; 2>/dev/null || echo "No verification files found"

      - name: Comprehensive Image Analysis
        run: |
          echo "🔍 Comprehensive image analysis..."
          IMAGE_NAME="${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:${{ github.sha }}"
          
          echo "📊 Image Details:"
          echo "Image ID: $(docker inspect "$IMAGE_NAME" --format='{{.Id}}')"
          echo "Created: $(docker inspect "$IMAGE_NAME" --format='{{.Created}}')"
          echo "Size: $(docker inspect "$IMAGE_NAME" --format='{{.Size}}' | numfmt --to=iec)"
          
          echo ""
          echo "🏗️ Build Information:"
          docker inspect "$IMAGE_NAME" --format='{{json .Config}}' | jq -r '
            "Architecture: " + .Architecture,
            "OS: " + .Os,
            "Working Directory: " + .WorkingDir,
            "User: " + .User,
            "Entry Point: " + (.Entrypoint | tostring),
            "Command: " + (.Cmd | tostring)
          '
          
          echo ""
          echo "📋 Environment Variables:"
          docker inspect "$IMAGE_NAME" --format='{{json .Config.Env}}' | jq -r '.[]' | sort

      - name: Test Multi-line Build Arg
        run: |
          echo "🔍 Testing multi-line build argument..."
          IMAGE_NAME="${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:${{ github.sha }}"
          
          # If your Dockerfile handles the multi-line arg, verify it
          MULTI_LINE=$(docker run --rm "$IMAGE_NAME" printenv MULTI_LINE_ARG || echo "not_set")
          echo "MULTI_LINE_ARG: $MULTI_LINE"
          
          # Check if newlines were preserved
          if [[ "$MULTI_LINE" == *$'\n'* ]]; then
            echo "✅ Multi-line argument preserves newlines"
          else
            echo "⚠️ Multi-line argument may not preserve newlines correctly"
          fi

      - name: Generate Verification Report
        run: |
          echo "📊 VERIFICATION REPORT" > verification_report.md
          echo "======================" >> verification_report.md
          echo "" >> verification_report.md
          echo "**Image:** ${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:${{ github.sha }}" >> verification_report.md
          echo "**Build Date:** $(date)" >> verification_report.md
          echo "**Workflow:** ${{ github.workflow }}" >> verification_report.md
          echo "**Run ID:** ${{ github.run_id }}" >> verification_report.md
          echo "" >> verification_report.md
          
          IMAGE_NAME="${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:${{ github.sha }}"
          
          echo "## Labels Verification" >> verification_report.md
          echo "\`\`\`" >> verification_report.md
          docker inspect "$IMAGE_NAME" --format='{{json .Config.Labels}}' | jq -r 'to_entries[] | "\(.key)=\(.value)"' | sort >> verification_report.md
          echo "\`\`\`" >> verification_report.md
          echo "" >> verification_report.md
          
          echo "## Environment Variables" >> verification_report.md
          echo "\`\`\`" >> verification_report.md
          docker inspect "$IMAGE_NAME" --format='{{json .Config.Env}}' | jq -r '.[]' | sort >> verification_report.md
          echo "\`\`\`" >> verification_report.md
          
          echo ""
          echo "📋 Verification report generated:"
          cat verification_report.md

      - name: Upload Verification Report
        uses: actions/upload-artifact@v4
        with:
          name: image-verification-report
          path: verification_report.md