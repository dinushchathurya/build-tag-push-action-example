name: Docker Build and Push with Build Args Injection

on: 
  push: 
    paths:
      - '.github/workflows/v2.0.0-build-args.yml'

jobs:
  docker-login-build-tag-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Inject Build Args Support into Dockerfile
        run: |
          echo "🔧 Injecting build args support into Dockerfile..."
          
          # Backup original Dockerfile
          cp Dockerfile Dockerfile.original
          
          # Create build args header that will be injected
          cat > build-args-injection.txt << 'EOF'
          
          # ===== BUILD ARGS INJECTION (by GitHub Actions) =====
          ARG NODE_ENV=production
          ARG VERSION=unknown
          ARG BUILD_DATE=unknown
          ARG GITHUB_SHA=unknown
          ARG GITHUB_REF=unknown
          ARG CUSTOM_ARG=default
          ARG MULTI_LINE_ARG=default
          
          # Convert build args to environment variables for runtime access
          ENV NODE_ENV=${NODE_ENV} \
              VERSION=${VERSION} \
              BUILD_DATE=${BUILD_DATE} \
              GITHUB_SHA=${GITHUB_SHA} \
              GITHUB_REF=${GITHUB_REF} \
              CUSTOM_ARG=${CUSTOM_ARG} \
              MULTI_LINE_ARG=${MULTI_LINE_ARG}
          
          # Create build verification file
          RUN mkdir -p /app && \
              echo "=== Build Args Verification ===" > /app/build-info.txt && \
              echo "NODE_ENV: ${NODE_ENV}" >> /app/build-info.txt && \
              echo "VERSION: ${VERSION}" >> /app/build-info.txt && \
              echo "BUILD_DATE: ${BUILD_DATE}" >> /app/build-info.txt && \
              echo "GITHUB_SHA: ${GITHUB_SHA}" >> /app/build-info.txt && \
              echo "GITHUB_REF: ${GITHUB_REF}" >> /app/build-info.txt && \
              echo "CUSTOM_ARG: ${CUSTOM_ARG}" >> /app/build-info.txt && \
              echo "MULTI_LINE_ARG: ${MULTI_LINE_ARG}" >> /app/build-info.txt && \
              echo "============================" >> /app/build-info.txt
          # ===== END BUILD ARGS INJECTION =====
          
          EOF
          
          # Find the best insertion point (after FROM statement)
          FROM_LINE=$(grep -n "^FROM" Dockerfile | tail -1 | cut -d: -f1)
          INSERT_AFTER=$((FROM_LINE))
          
          # Create new Dockerfile with injection
          head -n "$INSERT_AFTER" Dockerfile > Dockerfile.new
          cat build-args-injection.txt >> Dockerfile.new
          tail -n +"$((INSERT_AFTER + 1))" Dockerfile >> Dockerfile.new
          
          # Replace original with modified version
          mv Dockerfile.new Dockerfile
          rm build-args-injection.txt
          
          echo "✅ Build args injection completed!"
          echo "📋 Modified Dockerfile preview (first 25 lines):"
          head -25 Dockerfile
          echo "..."
          echo "📋 Insertion point was after line $INSERT_AFTER (FROM statement)"

      - name: Build, Tag & Publish Image to DockerHub with Build Args and Labels
        id: build
        uses: dinushchathurya/build-tag-push-action@v2.0.0-rc.1
        with:
            username: ${{ secrets.DOCKER_NEW_USERNAME }}
            password: ${{ secrets.DOCKER_NEW_PASSWORD }}
            context: .
            file: Dockerfile  # Uses the modified Dockerfile
            repoOwner: ${{ secrets.DOCKER_NEW_USERNAME }}
            repository: build-push-tag-action
            tag: ${{ github.sha }}
            build_args: | 
                NODE_ENV=test
                VERSION=1.0.0
                BUILD_DATE=${{ github.event.head_commit.timestamp }}
                GITHUB_SHA=${{ github.sha }}
                GITHUB_REF=${{ github.ref }}
                CUSTOM_ARG=test-value
                MULTI_LINE_ARG=line1\nline2\nline3
            labels: |
                org.opencontainers.image.title=Test Application
                org.opencontainers.image.description=Testing build args and labels
                org.opencontainers.image.url=https://github.com/${{ github.repository }}
                org.opencontainers.image.source=https://github.com/${{ github.repository }}
                org.opencontainers.image.version=1.0.0
                org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
                org.opencontainers.image.revision=${{ github.sha }}
                org.opencontainers.image.licenses=MIT
                org.opencontainers.image.vendor=Test Company
                maintainer=test@company.com
                environment=test
                test.type=build-args-labels
                test.timestamp=${{ github.event.head_commit.timestamp }}

      - name: Restore Original Dockerfile
        if: always()  # Always run, even if build fails
        run: |
          if [[ -f "Dockerfile.original" ]]; then
            mv Dockerfile.original Dockerfile
            echo "✅ Original Dockerfile restored"
          else
            echo "⚠️ Original Dockerfile backup not found"
          fi

      - name: Login to Docker Hub for Verification
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_NEW_USERNAME }}
          password: ${{ secrets.DOCKER_NEW_PASSWORD }}
      
      - name: Verify Image Labels
        run: |
          echo "🔍 Verifying Docker image labels..."
          IMAGE_NAME="${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:${{ github.sha }}"
          
          # Pull the image to inspect it
          echo "📥 Pulling image: $IMAGE_NAME"
          docker pull "$IMAGE_NAME"
          
          echo ""
          echo "📋 All Labels:"
          LABELS_JSON=$(docker inspect "$IMAGE_NAME" --format='{{json .Config.Labels}}')
          
          if [[ "$LABELS_JSON" == "null" || "$LABELS_JSON" == "{}" ]]; then
            echo "❌ NO LABELS FOUND!"
            echo "This indicates the labels were not applied during build."
            exit 1
          else
            echo "$LABELS_JSON" | jq -r 'to_entries[] | "\(.key)=\(.value)"' | sort
          fi
          
          echo ""
          echo "✅ Checking specific labels:"
          
          # Check specific labels
          TITLE=$(docker inspect "$IMAGE_NAME" --format='{{index .Config.Labels "org.opencontainers.image.title"}}')
          VERSION=$(docker inspect "$IMAGE_NAME" --format='{{index .Config.Labels "org.opencontainers.image.version"}}')
          MAINTAINER=$(docker inspect "$IMAGE_NAME" --format='{{index .Config.Labels "maintainer"}}')
          
          echo "Title: $TITLE"
          echo "Version: $VERSION"
          echo "Maintainer: $MAINTAINER"
          
          # Verify labels exist
          if [[ "$TITLE" == "Test Application" ]]; then
            echo "✅ Title label verified"
          else
            echo "❌ Title label missing or incorrect: '$TITLE'"
            exit 1
          fi
          
          if [[ "$VERSION" == "1.0.0" ]]; then
            echo "✅ Version label verified"
          else
            echo "❌ Version label missing or incorrect: '$VERSION'"
            exit 1
          fi

      - name: Verify Build Args NOW WORKING!
        run: |
          echo "🔍 Verifying injected build arguments..."
          IMAGE_NAME="${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:${{ github.sha }}"
          
          echo "📋 Build Args as Environment Variables:"
          echo "NODE_ENV: $(docker run --rm "$IMAGE_NAME" printenv NODE_ENV 2>/dev/null || echo 'FAILED')"
          echo "VERSION: $(docker run --rm "$IMAGE_NAME" printenv VERSION 2>/dev/null || echo 'FAILED')"
          echo "BUILD_DATE: $(docker run --rm "$IMAGE_NAME" printenv BUILD_DATE 2>/dev/null || echo 'FAILED')"
          echo "GITHUB_SHA: $(docker run --rm "$IMAGE_NAME" printenv GITHUB_SHA 2>/dev/null || echo 'FAILED')"
          echo "GITHUB_REF: $(docker run --rm "$IMAGE_NAME" printenv GITHUB_REF 2>/dev/null || echo 'FAILED')"
          echo "CUSTOM_ARG: $(docker run --rm "$IMAGE_NAME" printenv CUSTOM_ARG 2>/dev/null || echo 'FAILED')"
          echo "MULTI_LINE_ARG: $(docker run --rm "$IMAGE_NAME" printenv MULTI_LINE_ARG 2>/dev/null || echo 'FAILED')"
          
          echo ""
          echo "📋 Build Info File Content:"
          docker run --rm "$IMAGE_NAME" cat /app/build-info.txt 2>/dev/null || echo "Build info file not found"
          
          echo ""
          echo "🧪 Testing specific values:"
          NODE_ENV_VALUE=$(docker run --rm "$IMAGE_NAME" printenv NODE_ENV 2>/dev/null)
          if [[ "$NODE_ENV_VALUE" == "test" ]]; then
            echo "✅ NODE_ENV correctly set to 'test'"
          else
            echo "❌ NODE_ENV not set correctly. Got: '$NODE_ENV_VALUE'"
          fi
          
          VERSION_VALUE=$(docker run --rm "$IMAGE_NAME" printenv VERSION 2>/dev/null)
          if [[ "$VERSION_VALUE" == "1.0.0" ]]; then
            echo "✅ VERSION correctly set to '1.0.0'"
          else
            echo "❌ VERSION not set correctly. Got: '$VERSION_VALUE'"
          fi

      - name: Verify Multi-line Build Arg
        run: |
          echo "🔍 Testing multi-line build argument..."
          IMAGE_NAME="${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:${{ github.sha }}"
          
          MULTI_LINE=$(docker run --rm "$IMAGE_NAME" printenv MULTI_LINE_ARG 2>/dev/null || echo "not_set")
          echo "MULTI_LINE_ARG: '$MULTI_LINE'"
          
          # Check if it contains the expected content
          if [[ "$MULTI_LINE" == *"line1"* && "$MULTI_LINE" == *"line2"* && "$MULTI_LINE" == *"line3"* ]]; then
            echo "✅ Multi-line argument contains expected content"
          else
            echo "⚠️ Multi-line argument may not be processed correctly"
          fi

      - name: Generate Enhanced Verification Report
        run: |
          echo "📊 ENHANCED VERIFICATION REPORT" > verification_report.md
          echo "================================" >> verification_report.md
          echo "" >> verification_report.md
          echo "**Image:** ${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:${{ github.sha }}" >> verification_report.md
          echo "**Build Date:** $(date)" >> verification_report.md
          echo "**Workflow:** ${{ github.workflow }}" >> verification_report.md
          echo "**Run ID:** ${{ github.run_id }}" >> verification_report.md
          echo "" >> verification_report.md
          
          IMAGE_NAME="${{ secrets.DOCKER_NEW_USERNAME }}/build-push-tag-action:${{ github.sha }}"
          
          echo "## Labels Verification" >> verification_report.md
          echo "\`\`\`" >> verification_report.md
          LABELS_JSON=$(docker inspect "$IMAGE_NAME" --format='{{json .Config.Labels}}')
          if [[ "$LABELS_JSON" == "null" || "$LABELS_JSON" == "{}" ]]; then
            echo "NO LABELS FOUND!" >> verification_report.md
          else
            echo "$LABELS_JSON" | jq -r 'to_entries[] | "\(.key)=\(.value)"' | sort >> verification_report.md
          fi
          echo "\`\`\`" >> verification_report.md
          echo "" >> verification_report.md
          
          echo "## Build Args Verification" >> verification_report.md
          echo "\`\`\`" >> verification_report.md
          echo "NODE_ENV: $(docker run --rm "$IMAGE_NAME" printenv NODE_ENV 2>/dev/null || echo 'not_set')" >> verification_report.md
          echo "VERSION: $(docker run --rm "$IMAGE_NAME" printenv VERSION 2>/dev/null || echo 'not_set')" >> verification_report.md
          echo "BUILD_DATE: $(docker run --rm "$IMAGE_NAME" printenv BUILD_DATE 2>/dev/null || echo 'not_set')" >> verification_report.md
          echo "GITHUB_SHA: $(docker run --rm "$IMAGE_NAME" printenv GITHUB_SHA 2>/dev/null || echo 'not_set')" >> verification_report.md
          echo "CUSTOM_ARG: $(docker run --rm "$IMAGE_NAME" printenv CUSTOM_ARG 2>/dev/null || echo 'not_set')" >> verification_report.md
          echo "\`\`\`" >> verification_report.md
          echo "" >> verification_report.md
          
          echo "## Build Info File" >> verification_report.md
          echo "\`\`\`" >> verification_report.md
          docker run --rm "$IMAGE_NAME" cat /app/build-info.txt 2>/dev/null >> verification_report.md || echo "Build info file not found" >> verification_report.md
          echo "\`\`\`" >> verification_report.md
          
          echo ""
          echo "📋 Enhanced verification report generated:"
          cat verification_report.md

      - name: Upload Verification Report
        uses: actions/upload-artifact@v4
        with:
          name: image-verification-report-${{ github.sha }}
          path: verification_report.md