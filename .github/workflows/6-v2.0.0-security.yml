name: 6- Security Features Test Workflow
on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/6-v2.0.0-security.yml'

jobs:
  security-attestations:
    runs-on: ubuntu-latest
    name: Security Attestations Test
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: "🔒 Build with Security Features"
        id: security_build
        uses: dinushchathurya/build-tag-push-action@v2.0.0-rc.1
        with:
          username: ${{ secrets.DOCKER_NEW_USERNAME }}
          password: ${{ secrets.DOCKER_NEW_PASSWORD }}
          context: .
          file: Dockerfile
          repoOwner: ${{ secrets.DOCKER_NEW_USERNAME }}
          repository: test-security
          tag: security-${{ github.run_number }}
          platforms: linux/amd64,linux/arm64
          
          # Security features - set as strings
          provenance: "true"
          sbom: "true"
          
          # Cache configuration
          cache_from: type=registry,ref=${{ secrets.DOCKER_NEW_USERNAME }}/test-security:cache
          cache_to: type=registry,ref=${{ secrets.DOCKER_NEW_USERNAME }}/test-security:cache,mode=max

      # Add verification steps
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: "✅ Verify Security Features"
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_NEW_USERNAME }}/test-security:security-${{ github.run_number }}"
          
          echo "🔍 Testing image: $IMAGE_NAME"
          
          # Wait a moment for attestations to be available
          sleep 10
          
          # Test provenance
          echo "=== Testing Provenance ==="
          if cosign verify-attestation \
            --type slsaprovenance \
            --certificate-identity-regexp=".*" \
            --certificate-oidc-issuer-regexp=".*" \
            $IMAGE_NAME 2>/dev/null; then
            echo "✅ Provenance attestation: PASS"
          else
            echo "❌ Provenance attestation: FAIL"
            # Don't exit, continue testing
          fi
          
          # Test SBOM
          echo "=== Testing SBOM ==="
          if cosign verify-attestation \
            --type spdxjson \
            --certificate-identity-regexp=".*" \
            --certificate-oidc-issuer-regexp=".*" \
            $IMAGE_NAME 2>/dev/null; then
            echo "✅ SBOM attestation: PASS"
          else
            echo "❌ SBOM attestation: FAIL"
            # Try alternative SBOM type
            if cosign verify-attestation \
              --type https://spdx.dev/Document \
              --certificate-identity-regexp=".*" \
              --certificate-oidc-issuer-regexp=".*" \
              $IMAGE_NAME 2>/dev/null; then
              echo "✅ SBOM attestation (spdx): PASS"
            else
              echo "❌ SBOM attestation: FAIL (both types)"
            fi
          fi
          
          # Try to download and inspect
          echo "=== Inspecting Attestations ==="
          
          # Check what attestations exist
          echo "Available attestations:"
          cosign tree $IMAGE_NAME || echo "No cosign tree available"
          
          # Try to download any attestations
          echo "Attempting to download attestations..."
          cosign download attestation $IMAGE_NAME || echo "No attestations found with basic search"
          
          # Try specific types
          echo "Trying specific attestation types..."
          cosign download attestation --predicate-type slsaprovenance $IMAGE_NAME > provenance.json 2>/dev/null && echo "✅ Downloaded provenance" || echo "❌ No provenance"
          cosign download attestation --predicate-type spdxjson $IMAGE_NAME > sbom.json 2>/dev/null && echo "✅ Downloaded SBOM (spdxjson)" || echo "❌ No SBOM (spdxjson)"
          cosign download attestation --predicate-type https://spdx.dev/Document $IMAGE_NAME > sbom-spdx.json 2>/dev/null && echo "✅ Downloaded SBOM (spdx)" || echo "❌ No SBOM (spdx)"