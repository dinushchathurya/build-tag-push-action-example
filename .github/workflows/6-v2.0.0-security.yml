name: 6- Security Features Test Workflow
on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/6-v2.0.0-security.yml'

jobs:
  security-attestations:
    runs-on: ubuntu-latest
    name: Security Attestations Test
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: "üîí Build with Security Features"
        id: security_build
        uses: dinushchathurya/build-tag-push-action@v2.0.0-rc.1
        with:
          username: ${{ secrets.DOCKER_NEW_USERNAME }}
          password: ${{ secrets.DOCKER_NEW_PASSWORD }}
          context: .
          file: Dockerfile
          repoOwner: ${{ secrets.DOCKER_NEW_USERNAME }}
          repository: test-security
          tag: security-${{ github.run_number }}
          platforms: linux/amd64,linux/arm64
          
          # Security features
          provenance: true
          sbom: true
          
          # Use registry cache instead of GHA cache
          cache_from: type=registry,ref=${{ secrets.DOCKER_NEW_USERNAME }}/test-security:cache
          cache_to: type=registry,ref=${{ secrets.DOCKER_NEW_USERNAME }}/test-security:cache,mode=max

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: "‚úÖ Test Security Features"
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_NEW_USERNAME }}/test-security:security-${{ github.run_number }}"
          
          echo "üîç Testing image: $IMAGE_NAME"
          
          # Test 1: Check if provenance exists
          echo "=== Testing Provenance ==="
          if cosign verify-attestation \
            --type slsaprovenance \
            --certificate-identity-regexp=".*" \
            --certificate-oidc-issuer-regexp=".*" \
            $IMAGE_NAME 2>/dev/null; then
            echo "‚úÖ Provenance attestation: PASS"
          else
            echo "‚ùå Provenance attestation: FAIL"
            exit 1
          fi
          
          # Test 2: Check if SBOM exists
          echo "=== Testing SBOM ==="
          if cosign verify-attestation \
            --type spdxjson \
            --certificate-identity-regexp=".*" \
            --certificate-oidc-issuer-regexp=".*" \
            $IMAGE_NAME 2>/dev/null; then
            echo "‚úÖ SBOM attestation: PASS"
          else
            echo "‚ùå SBOM attestation: FAIL"
            exit 1
          fi
          
          # Test 3: Download and inspect content
          echo "=== Inspecting Attestation Content ==="
          cosign download attestation --predicate-type slsaprovenance $IMAGE_NAME > provenance.json
          cosign download attestation --predicate-type spdxjson $IMAGE_NAME > sbom.json
          
          echo "Provenance keys:"
          cat provenance.json | jq -r '.payload | @base64d | fromjson | .predicate | keys[]' | head -5
          
          echo "SBOM package count:"
          PACKAGE_COUNT=$(cat sbom.json | jq -r '.payload | @base64d | fromjson | .predicate.packages | length')
          echo "Found $PACKAGE_COUNT packages"
          
          if [ "$PACKAGE_COUNT" -gt 0 ]; then
            echo "‚úÖ SBOM contains packages: PASS"
          else
            echo "‚ùå SBOM contains no packages: FAIL"
            exit 1
          fi
          
          echo "üéâ All security features verified successfully!"